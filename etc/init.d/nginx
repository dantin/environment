#! /bin/sh

### BEGIN INIT INFO
# Provides:          nginx
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: nginx init.d bash script for debian/ubuntu
# Description:       nginx init.d bash script for debian/ubuntu
### END INIT INFO

#------------------------------------------------------------------------------
#                               Functions
#------------------------------------------------------------------------------
. /lib/lsb/init-functions
 
#------------------------------------------------------------------------------
#                               Consts
#------------------------------------------------------------------------------

# Change these to match your nginx configuration
NGINX_HOME="/usr/local/share/nginx"

DAEMON="$NGINX_HOME/sbin/nginx"
NGINX_CONF_FILE="$NGINX_HOME/conf/nginx.conf"
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

PS="nginx"				# process name
PIDNAME="nginx"				# lets you do $PS-slave
DESCRIPTION="Nginx Server..."		#
PIDFILE=$PIDNAME.pid                    # pid file
PIDSPATH=/var/run			#
RUNAS=root                              # user to run as
SCRIPT_OK=0                             # ala error codes
SCRIPT_ERROR=1                          # ala error codes
TRUE=1                                  # boolean
FALSE=0                                 # boolean
 
#------------------------------------------------------------------------------
#                               Simple Tests
#------------------------------------------------------------------------------
 
#test if nginx is a file and executable
test -x $DAEMON || exit 0
 
# Include nginx defaults if available
if [ -f /etc/default/nginx ] ; then
    . /etc/default/nginx
fi
 
#set exit condition
#set -e
 
#------------------------------------------------------------------------------
#                               Functions
#------------------------------------------------------------------------------
 
set_file_perms(){
    if [ -f $PIDSPATH/$PIDFILE ]; then
        chmod 400 $PIDSPATH/$PIDFILE
    fi
}
 
config_test() {
    $DAEMON -t -c $NGINX_CONF_FILE
}
 
get_ps_count() {
    return `pgrep -f $PS | wc -l`
}
 
is_running() {
    if [ $1 ]; then
        pid_of_daemon $1
        PID=$?
 
        if [ $PID -gt 0 ]; then
            return 1
        else
            return 0
        fi
    else
        pid_of_daemon
        PID=$?
 
        if [ $PID -gt 0 ]; then
            return 1
        else
            return 0
        fi
    fi
}
 
#courtesy of php-fpm
wait_for_pid () {
    try=0
 
    while test $try -lt 35 ; do
 
        case "$1" in
            'created')
            if [ -f "$2" ] ; then
                try=''
                break
            fi
            ;;
 
            'removed')
            if [ ! -f "$2" ] ; then
                try=''
                break
            fi
            ;;
        esac
 
        #echo -n .
        try=`expr $try + 1`
        sleep 1
    done
}
 
status(){
    is_running
    is_alive=$?

    if [ "${is_alive}" -eq $TRUE ]; then
        echo "$PIDNAME found running with processes:  `pidof $PS`"
    else
        echo "$PIDNAME is NOT running."
    fi
}
 
remove_pid_file(){
    if [ $1 ]; then
        if [ -f $1 ]; then
            rm -f $1
        fi
    else
        #Do default removal
        if [ -f $PIDSPATH/$PIDFILE ]; then
            rm -f $PIDSPATH/$PIDFILE
        fi
    fi
}
 
start() {
    log_daemon_msg "Starting $DESCRIPTION"

    start-stop-daemon --start --quiet --chuid $RUNAS --exec $DAEMON -- -c $NGINX_CONF_FILE
    log_end_msg $SCRIPT_OK    
    return 0
}
 
stop() {
    log_daemon_msg "Stopping $DESCRIPTION" 

    log_end_msg $SCRIPT_OK
    start-stop-daemon --stop --quiet --exec $DAEMON          
    return 0
}
 
reload() {
    config_test || return $?
 
    log_daemon_msg "Reloading (via HUP) $DESCRIPTION"
 
    is_running
    if [ $? -eq $TRUE ]; then
        `killall -HUP $PS` #to be safe
 
        log_end_msg $SCRIPT_OK
    else
        log_end_msg $SCRIPT_ERROR
    fi
}
 
terminate() {
    log_daemon_msg "Force terminating (via KILL) $DESCRIPTION"
 
    PIDS=`pidof $PS` || true
 
    [ -e $PIDSPATH/$PIDFILE ] && PIDS2=`cat $PIDSPATH/$PIDFILE`
 
    for i in $PIDS; do
        if [ "$i" = "$PIDS2" ]; then
            kill $i
            wait_for_pid 'removed' $PIDSPATH/$PIDFILE
            remove_pid_file
        fi
    done
 
    log_end_msg $SCRIPT_OK
}
 
destroy() {
    log_daemon_msg "Force terminating and may include self (via KILLALL) $DESCRIPTION"
    killall $PS -q >> /dev/null 2>&1
    log_end_msg $SCRIPT_OK
}
 
pid_of_daemon() {
    PIDS=`pidof $PS` || true
 
    [ -e $PIDSPATH/$PIDFILE ] && PIDS2=`cat $PIDSPATH/$PIDFILE`

    for i in $PIDS; do
        if [ "$i" = "$PIDS2" ]; then
            return 1
        fi
    done
    return 0
}
 
#------------------------------------------------------------------------------
#                               Bootstrap
#------------------------------------------------------------------------------
 
case "$1" in
  start)
	start
        ;;
  stop)
	stop
        ;;
  restart|force-reload)
	stop
	sleep 1
	start
        ;;
  reload)
	reload
	;;
  status) 
	status
	;;
  config-test)
        config_test
        ;;
  terminate)
	terminate
	;;
  destroy)
	destroy
	;;
  *)
	FULLPATH=/etc/init.d/$PS
	echo "Usage: $FULLPATH {start|stop|restart|force-reload|status|config-test|terminate|destroy}"
	echo "       The 'destroy' command should only be used as a last resort." 
	exit 1
	;;
esac

exit 0
